@model ProyectoFinal.Models.SessionModel
@using ProyectoFinal.Models
@{
	ViewBag.Title = "Play";
	ViewBag.ShowFooter = false;
}

<div class="deck">
	@foreach (var _ in Enumerable.Range(0, Model.DeckCount))
	{
		@Html.Partial("Card", new Card { Color = (Color)(-1), Rank = (Rank)(-1) })
	}
</div>
<div class="discard-pile">
	@foreach (var _ in Enumerable.Range(0, Model.DiscardPileCount))
	{
		@Html.Partial("Card", new Card { Color = (Color)(-1), Rank = (Rank)(-1) })
	}
	@Html.Partial("Card", Model.DiscardPileTop)
</div>

<div class="name-wrapper" style="bottom: 160px; left: calc(50% - 100px);">
	<div id="user-@Model.Hands[0].User.Id" class="name @(Model.Hands[0].IsTheirTurn ? "active" : "")">
		<div class="skip" style="display: none;">SKIP</div>
		<div class="draw-two" style="display: none;">+2</div>
		<div class="draw-four" style="display: none;">+4</div>
		<img src="@Url.Action("Photo", "Account", new { userId = Model.Hands[0].User.Id })"/>
		<span>@Model.Hands[0].User.Name</span>
	</div>
</div>
<div id="my-hand" class="cards" style="position: fixed; width: calc(100% - 320px); bottom: 0; left: 160px;">
	@foreach (var card in Model.Hands[0].Cards)
	{
		@Html.Partial("Card", card)
	}
</div>

<div class="name-wrapper" style="right: 160px; bottom: calc(50% - 120px); transform: rotate(-90deg)">
	<div id="user-@Model.Hands[1].User.Id" class="name @(Model.Hands[1].IsTheirTurn ? "active" : "")">
		<div class="skip" style="display: none;">SKIP</div>
		<div class="draw-two" style="display: none;">+2</div>
		<div class="draw-four" style="display: none;">+4</div>
		<img src="@Url.Action("Photo", "Account", new { userId = Model.Hands[1].User.Id })" />
		<span>@Model.Hands[1].User.Name</span>
	</div>
</div>
<div id="hand-@Model.Hands[1].User.Id" class="cards cards-rotate-270" style="position: fixed; height: calc(100% - 360px); top: 200px; right: 0; flex-direction: column; transform: rotate(180deg);">
	@foreach (var card in Model.Hands[1].Cards)
	{
		@Html.Partial("Card", card)
	}
</div>

<div class="name-wrapper" style="top: 200px; right: calc(50% - 100px); transform: rotate(180deg)">
	<div id="user-@Model.Hands[2].User.Id" class="name @(Model.Hands[2].IsTheirTurn ? "active" : "")">
		<div class="skip" style="display: none;">SKIP</div>
		<div class="draw-two" style="display: none;">+2</div>
		<div class="draw-four" style="display: none;">+4</div>
		<img src="@Url.Action("Photo", "Account", new { userId = Model.Hands[2].User.Id })" />
		<span>@Model.Hands[2].User.Name</span>
	</div>
</div>
<div id="hand-@Model.Hands[2].User.Id" class="cards" style="position: fixed; width: calc(100% - 320px); top: 40px; left: 160px; transform: rotate(180deg);">
	@foreach (var card in Model.Hands[2].Cards)
	{
		@Html.Partial("Card", card)
	}
</div>


<div class="name-wrapper" style="left: 160px; top: calc(50% - 80px); transform: rotate(90deg)">
	<div id="user-@Model.Hands[3].User.Id" class="name @(Model.Hands[3].IsTheirTurn ? "active" : "")">
		<div class="skip" style="display: none;">SKIP</div>
		<div class="draw-two" style="display: none;">+2</div>
		<div class="draw-four" style="display: none;">+4</div>
		<img src="@Url.Action("Photo", "Account", new { userId = Model.Hands[3].User.Id })" />
		<span>@Model.Hands[3].User.Name</span>
	</div>
</div>
<div id="hand-@Model.Hands[3].User.Id" class="cards cards-rotate-270" style="position: fixed; height: calc(100% - 360px); top: 200px; left: 0; flex-direction: column;">
	@foreach (var card in Model.Hands[3].Cards)
	{
		@Html.Partial("Card", card)
	}
</div>


<div class="modal fade" id="modal-wild" tabindex="-1" role="dialog" aria-labelledby="modal-wild-label">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title" id="modal-wild-label">Elige un color</h4>
			</div>
			<div class="modal-body" style="text-align: center;">
				<button type="button" class="btn button-color button-red" data-dismiss="modal" data-color="red" data-intcolor="@((int)Color.Red)"></button>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				<button type="button" class="btn button-color button-yellow" data-dismiss="modal" data-color="yellow" data-intcolor="@((int)Color.Yellow)"></button>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				<button type="button" class="btn button-color button-green" data-dismiss="modal" data-color="green" data-intcolor="@((int)Color.Green)"></button>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				<button type="button" class="btn button-color button-blue" data-dismiss="modal" data-color="blue" data-intcolor="@((int)Color.Blue)"></button>
			</div>
		</div>
	</div>
</div>

@section scripts {

<script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
<script src="~/signalr/hubs"></script>
<script>
	$(function () {
		var userId = "@Model.Hands[0].User.Id";
		var isMyTurn = @(Model.Hands[0].IsTheirTurn ? "true" : "false");
		var game = $.connection.gameHub;
	
		var cardsReceived = [];
	
		game.client.receiveCards = function (cards) {
			cardsReceived = cards;
		}

		game.client.update = function (info) {

			function checkAction() {
				$("#user-" + info.PreviousUserId).removeClass("active");

				if (!info.Action) {
					$("#user-" + info.NextUserId).addClass("active");
					isMyTurn = info.NextUserId == userId;
				}
				else switch (info.Action.Rank)
				{
					default: throw Error("Unknown rank");
					case @((int)Rank.Skip):
						$("#user-" + info.Action.UserId).find(".skip")
							.velocity("fadeIn")
							.velocity("fadeOut", {
								delay: 500,
								complete: function () {
									$("#user-" + info.NextUserId).addClass("active");
									isMyTurn = info.NextUserId == userId;
								},
							});
					break;
					case @((int)Rank.DrawTwo):
					case @((int)Rank.WildDrawFour):
						$("#user-" + info.Action.UserId).find(info.Action.Rank == @((int)Rank.DrawTwo) ? ".draw-two" : ".draw-four")
							.velocity("fadeIn")
							.velocity("fadeOut", {
								delay: 500,
								complete: function () {
									$("#user-" + info.NextUserId).addClass("active");
									isMyTurn = info.NextUserId == userId;
								},
							});
					
						if (cardsReceived.length)
						{
							$(".deck .card").slice(-cardsReceived.length).remove();
						
							cardsReceived.forEach(function (value, index) {
								var $card = $(value.trim());
								$(".deck").append($card);

								var $hand = $("#my-hand");
							
								var offsetTop = $hand.offset().top - $card.offset().top;
								$card.velocity({ translateY: "+=" + offsetTop },
									{
										delay: 500 * (index + 1),
										complete: function ()
										{
											$card.css("transform", "").appendTo($hand);
										}
									});
							});

							cardsReceived = [];
						}
						else
						{
							var $cardsReceivedHTML = $(".deck .card").slice(info.Action.Rank == @((int)Rank.DrawTwo) ? -2 : -4);
							$cardsReceivedHTML.each(function (index)
							{
								var $card = $(this);
								var $hand = $("#hand-" + info.Action.UserId);
								
								var transform;
							
								if ($hand.is(".cards-rotate-270"))
								{
									//vertical
									var offsetLeft = $hand.offset().left - $card.offset().left;
									transform = { translateX: "+=" + offsetLeft };
								}
								else
								{
									//horizontal
									var offsetTop = $hand.offset().top - $card.offset().top;
									transform = { translateY: "+=" + offsetTop };
								}
							
								$card.velocity(transform,
									{
										delay: 500 * index,
										complete: function ()
										{
											$card.css("transform", "").appendTo($hand);
										}
									});
							});
						}
					break;
				}
			}

			if (info.PreviousUserId != userId) {
				if (info.CardHtml) {
					var $newCard = $(info.CardHtml.trim());
					$("#hand-" + info.PreviousUserId).find(".card").last().remove();
					$("#hand-" + info.PreviousUserId).append($newCard);

					var $discardPileTop = $(".discard-pile .card").last();
					var offsetLeft = $discardPileTop.offset().left - $newCard.offset().left;
					var offsetTop = $discardPileTop.offset().top - ($newCard.offset().top - 0.3);

					$newCard.appendTo(".discard-pile");

					$newCard.velocity({
						translateX: "-=" + (offsetLeft) + "px",
						translateY: "-=" + (offsetTop) + "px",
					}, { duration: 0 });

					$newCard.velocity({
						translateX: "+=" + (offsetLeft) + "px",
						translateY: "+=" + (offsetTop) + "px",
					}, function () {
						$newCard.css("transform", "");
						checkAction();
					});
				}
				else { //Draw a card

					var $cardsReceivedHTML = $(".deck .card").slice(-1);
					$cardsReceivedHTML.each(function (index)
					{
						var $card = $(this);
						var $hand = $("#hand-" + info.PreviousUserId);
								
						var transform;
							
						if ($hand.is(".cards-rotate-270"))
						{
							//vertical
							var offsetLeft = $hand.offset().left - $card.offset().left;
							transform = { translateX: "+=" + offsetLeft };
						}
						else
						{
							//horizontal
							var offsetTop = $hand.offset().top - $card.offset().top;
							transform = { translateY: "+=" + offsetTop };
						}
							
						$card.velocity(transform,
							{
								delay: 500 * index,
								complete: function ()
								{
									$card.css("transform", "").appendTo($hand);
								}
							});
					});
				
					checkAction();
				}
			}
			else {
				checkAction();
			}
		}

		var acceptMove = function () { };
		var denyMove = function () { };
	
		game.client.denyMove = function () { denyMove(); };
		game.client.acceptMove = function () { acceptMove(); };
		game.client.denyDraw = function () { };
		game.client.acceptDraw = function (cardHTML) {
			var $card = $(cardHTML.trim());
			$(".deck").append($card);

			var $hand = $("#my-hand");
							
			var offsetTop = $hand.offset().top - $card.offset().top;
			$card.velocity({ translateY: "+=" + offsetTop },
				{
					delay: 500,
					complete: function ()
					{
						$card.css("transform", "").appendTo($hand);
					}
				});
		};

		$.connection.hub.qs = { "sessionId": "@Model.Id" };
		$.connection.hub.start().done(function () {
			$("#my-hand").on("click", ".card", function (event) {
				if (!isMyTurn) return;

				var $this = $(this);
				var $discardPileTop = $(".discard-pile .card").last();
			
				function moveCard(color) {
					var offsetLeft = $discardPileTop.offset().left - $this.offset().left;
					var offsetTop = $discardPileTop.offset().top - ($this.offset().top - 0.3);

					$this.velocity({
						translateX: "+=" + (offsetLeft) + "px",
						translateY: "+=" + (offsetTop) + "px",
					}, function () {
						acceptMove = function () {
							$this.css("transform", "");
							$this.appendTo(".discard-pile");
							$(".name").removeClass("active");
						};
						denyMove = function () {
							$this.velocity({
								translateX: "-=" + (offsetLeft) + "px",
								translateY: "-=" + (offsetTop) + "px",
							});
						};
						game.server.useCard("@Model.Id", $this.attr("id").replace("card-", ""), color);
					});
				}
			
				if ($this.data("rank") == "@Rank.Wild.ToString()" || $this.data("rank") == "@Rank.WildDrawFour.ToString()") {
				
					$("#modal-wild .modal-body").one("click", ".button-color", function (event) {
						$this.data("color", $(this).data("color"));
						$this.find(".card-inner").removeClass("card-wild").addClass("card-" + $(this).data("color"));
						moveCard(parseInt($(this).data("intcolor")));
					});
					$("#modal-wild").modal("show");
				}
				else if ($discardPileTop.data("color") == $this.data("color") || $discardPileTop.data("rank") == $this.data("rank")) {
					moveCard(0);
				}
			});
		
			$(".deck").on("click", function (event) {
				if (!isMyTurn) return;
				game.server.drawCard("@Model.Id");
			});
		});

	});
</script>
}